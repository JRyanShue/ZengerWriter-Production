{"version":3,"sources":["API.js","EditorPreview.js","EditorList.js","ID.js","QueuePlateElement.js","QueueElement.js","QueueList.js","QueueHeader.js","Queue.js","EditorHeader.js","Prepare.js","Slice.js","reportWebVitals.js","index.js"],"names":["data","IP","a","formData","FormData","append","JSON","stringify","fetch","method","body","then","response","text","value","returnGcode","gcode","filename","link","document","createElement","console","log","blob","href","URL","revokeObjectURL","createObjectURL","download","dispatchEvent","MouseEvent","save","Blob","type","info_json","username","queueID","headers","Headers","mode","cache","credentials","redirect","referrerPolicy","GetQueueKeys","values","json","queue_numbers","i","length","push","catch","GetQueueInfo","Username","QueueID","QueueList","info","setQueue","GetEditors","project_numbers","GetEditorPreviewUrl","User","EditorID","gcodepreviews","img_url","name","setPreview","gcodelist","editorID","editorName","url","enterEditor","setURL","Preview","props","key","backgroundImage","id","className","handleClick","GetEditorURL","this","startDrag","ev","transferObject","dataTransfer","setData","draggable","onDragStart","style","background","backgroundRepeat","backgroundPosition","backgroundSize","onClick","bind","React","Component","GcodePreview","editorNumbers","previews","listItems","state","numbersList","mounted","editorURL","window","location","getEditorNumbers","sort","reverse","numbers","SetEditorPreview","Object","Promise","all","map","toString","setState","editors","CreateID","Date","now","getTime","Math","floor","QueuePlateElement","queueOrder","number","plateName","queuelist","setInfo","onChange","getElementById","textField","addEventListener","defaultValue","QueueElement","elements","elementsInfo","elementsArr","elementsArray","elementsDiv","element","indexOf","rootID","display","dragOver","preventDefault","drop","droppedItem","getData","newID","parse","keys","queueData","order","ID","SaveInfo","onDragOver","onDrop","queueKeys","queuesData","queuesList","setQueueList","queueList","addQueue","queueInfo","createQueueElement","getQueueKeys","SetQueueInfo","queues","QueueHeader","newQueue","Queue","serverIP","EditorHeader","newEditor","SetEditorURL","Prepare","Slice","item","queue","queueArr","index","SpliceQueue","sliceItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dbd7a1f1.chunk.js","sourcesContent":["\r\nconst api_port = \":8080\";\r\n\r\nasync function SpliceQueue( data, IP ) {\r\n\r\n    // Build FormData object\r\n    let formData = new FormData();\r\n    formData.append( 'data', JSON.stringify( data ) );\r\n\r\n    const response = fetch( 'http://' + IP + api_port + '/splice_queue',\r\n    {\r\n        method: 'POST',\r\n        body: formData,\r\n    } ).then( () => {\r\n        // Pull completed gcode\r\n        fetch( 'http://' + IP + api_port + '/get_gcode' ) // get_gcode\r\n            .then( response => response.text() )  // use .text() because it's a gcode file, not JSON\r\n            .then( value => {\r\n                returnGcode( value );\r\n            })  // callback for handling gcode value)\r\n    } );    \r\n\r\n}\r\n\r\n// Return gcode to user ( via download )\r\nfunction returnGcode( gcode ) {\r\n\r\n    var link = document.createElement( 'a' );\r\n    var save = ( blob, filename ) => {\r\n\r\n\t\tif ( link.href ) {\r\n\r\n\t\t\tURL.revokeObjectURL( link.href );\r\n\r\n\t\t}\r\n\r\n\t\tlink.href = URL.createObjectURL( blob );\r\n\t\tlink.download = filename || 'data.json';\r\n\t\tlink.dispatchEvent( new MouseEvent( 'click' ) );\r\n\r\n\t}\r\n\r\n    var saveString = ( text, filename ) => {\r\n\r\n\t\tsave( new Blob( [ text ], { type: 'text/plain' } ), filename );\r\n\r\n\t}\r\n\r\n    console.log( gcode );\r\n    saveString( gcode, \"queue.gcode\" );\r\n\r\n}\r\n\r\n\r\n// Saves info.json for specified queue\r\nasync function SaveInfo( info_json, username, queueID, IP ) {\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + username + '/queues/' + queueID + '/info.json');\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    const response = await fetch( 'http://' + IP + api_port + '/put_json', {\r\n\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: headers,\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify(info_json)  // JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n\r\n    });\r\n\r\n}\r\n\r\n\r\nasync function GetQueueKeys ( IP, username ) {\r\n\r\n    /* \r\n        Get all queues for a specified user\r\n        Queues are then sorted by date last used, and another request is sent to get their contents. \r\n    */\r\n\r\n    console.log(\"Getting queue list from username:\", username);\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('username', username);\r\n\r\n    console.log(\"headers:\", headers);\r\n\r\n    var values = [];\r\n    var data_;\r\n\r\n    const response = await fetch( 'http://' + IP + api_port + '/get_queues', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer'\r\n    }).then(\r\n        response => response.json()\r\n    ).then(\r\n        data => {\r\n\r\n            var queue_numbers = data['queue_numbers'];\r\n            console.log('queue numbers:', queue_numbers);\r\n            for (var i = 0; i < queue_numbers.length; i++){\r\n                console.log('at i:', queue_numbers[i]);\r\n                values.push(queue_numbers[i]);\r\n            }\r\n            \r\n        }\r\n    ).catch( function () {\r\n        console.log('error');\r\n    });\r\n\r\n    console.log(\"values:\", values);\r\n    return values;\r\n\r\n}\r\n\r\n\r\nasync function GetQueueInfo ( IP, Username, QueueID, QueueList ) {\r\n\r\n    /* \r\n        Using ID, get queue name. Sets via callback\r\n    */\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + Username + '/queues/' + QueueID + '/info.json');\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    await fetch( 'http://' + IP + api_port + '/pull_object', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer', \r\n    }).then(\r\n        (response) => response.json()\r\n    ).then(\r\n        data => {\r\n            \r\n            console.log(\"data from API:\", data);\r\n            var info = data['body'];\r\n            console.log(\"INFO::\", info)\r\n\r\n            // Important callback call\r\n            QueueList.setQueue(QueueID, info, QueueList);\r\n\r\n            return \"OK\";\r\n\r\n        }\r\n    );\r\n\r\n}\r\n\r\n\r\nasync function GetEditors ( IP, username ) {\r\n\r\n    /* \r\n        Get all projects for a specified user\r\n        Projects are then sorted by date last used, and another request is sent to get their contents. \r\n    */\r\n\r\n    console.log(\"Getting project list from username:\", username);\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('username', username);\r\n\r\n    console.log(\"headers:\", headers);\r\n\r\n    var values = [];\r\n    var data_;\r\n\r\n    console.log( 'http://' + IP + api_port + '/get_projects' )\r\n    const response = await fetch( 'http://' + IP + api_port + '/get_projects', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer'\r\n    }).then(\r\n        response => response.json()\r\n    ).then(\r\n        data => {\r\n\r\n            var project_numbers = data['project_numbers'];\r\n            console.log('keys:', project_numbers);\r\n            for (var i = 0; i < project_numbers.length; i++){\r\n                console.log('at i:', project_numbers[i]);\r\n                values.push(project_numbers[i]);\r\n            }\r\n            \r\n        }\r\n    ).catch( function () {\r\n        console.log('error');\r\n    });\r\n\r\n    console.log(\"values:\", values);\r\n    return values;\r\n\r\n}\r\n\r\nasync function GetEditorPreviewUrl ( IP, User, EditorID, gcodepreviews ) {\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + User + '/projects/' + EditorID);\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    await fetch( 'http://' + IP + api_port + '/get_object', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer', \r\n    }).then(\r\n        (response) => response.json()\r\n    ).then(\r\n        data => {\r\n            \r\n            console.log(\"data from API:\", data);\r\n            var img_url = data['url'];\r\n            var name = data['name'];\r\n\r\n            // Important callback call\r\n            gcodepreviews.setPreview(EditorID, name, img_url, gcodepreviews);\r\n\r\n            return \"OK\";\r\n\r\n        }\r\n    );\r\n\r\n}\r\n\r\n\r\nasync function GetEditorData ( gcodelist, EditorID ) {\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + gcodelist.username + '/projects/' + EditorID + '/editor.json');\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    await fetch( 'http://' + gcodelist.IP + api_port + '/pull_object', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer', \r\n    }).then(\r\n        (response) => response.json()\r\n    ).then(\r\n        data => {\r\n            \r\n            var editor = data['body'];\r\n            console.log(\"editor:\", editor);\r\n\r\n            return \"OK\";\r\n\r\n        }\r\n    );\r\n\r\n}\r\n\r\n\r\nasync function GetEditorURL ( gcodelist, editorID, editorName ) {\r\n\r\n    // Headers\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + gcodelist.username + '/projects/' + editorID);\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    await fetch( 'http://' + gcodelist.IP + api_port + '/pull_object_url', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer', \r\n    }).then(\r\n        (response) => response.json()\r\n    ).then(\r\n        data => {\r\n            \r\n            // console.log(\"data from API:\", data);\r\n            var url = data['url'];\r\n            console.log(\"editor url:\", url);\r\n\r\n            gcodelist.enterEditor( url, gcodelist.username, editorID, editorName ); \r\n            return \"OK\";\r\n\r\n        }\r\n    );\r\n}\r\n\r\n\r\nasync function SetEditorURL ( username, IP, editorID, setURL ) {\r\n\r\n    // Only sets URL with callback ( no action otherwise )\r\n\r\n    // If requested editor doesn't exist, initialize a new one with the specified path. \r\n\r\n    // Headers\r\n    console.log(\"SetEditorURL\")\r\n\r\n    var headers = new Headers(); \r\n    headers.append('path', 'Users/' + username + '/projects/' + editorID);\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    await fetch( 'http://' + IP + api_port + '/pull_object_url', {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer', \r\n    }).then(\r\n        (response) => response.json()\r\n    ).then(\r\n        data => {\r\n            \r\n            // console.log(\"data from API:\", data);\r\n            var url = data['url'];\r\n\r\n            console.log(\"GOT URL::\", url)\r\n\r\n            setURL( url );\r\n\r\n            return \"OK\";\r\n\r\n        }\r\n    );\r\n}\r\n\r\n\r\nexport { SpliceQueue, SaveInfo, GetEditorPreviewUrl, GetQueueInfo, GetEditors, GetQueueKeys, GetEditorData, GetEditorURL, SetEditorURL }","\r\nimport React from 'react';\r\nimport { GetEditorData, GetEditorURL } from './API.js';\r\n\r\nclass Preview extends React.Component {\r\n\r\n    /*\r\n        Returns a component with a preview of an editor.\r\n    */\r\n\r\n    constructor( props ) {\r\n        \r\n        super( props );\r\n        this.key = props.key;\r\n        this.backgroundImage = props.backgroundImage;\r\n        console.log(this.backgroundImage)\r\n\r\n        this.id = props.id;\r\n        this.name = props.name;\r\n\r\n        this.className=\"preview-img\";\r\n\r\n        this.gcodelist = props.gcodelist;\r\n\r\n        this.handleClick = function () {\r\n\r\n            // Callback is within function\r\n            GetEditorURL( this.gcodelist, this.id, this.name );\r\n\r\n        };\r\n\r\n        this.startDrag = (ev) => {\r\n\r\n            // console.log(\"name:\", this.name, \" id:\", this.id);\r\n\r\n            let transferObject = {\r\n                \"name\": this.name,\r\n                \"id\": this.id\r\n            };\r\n            ev.dataTransfer.setData(\"application/json\", JSON.stringify(transferObject));\r\n    \r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        return( \r\n\r\n            // Handle data transfer through drag and drop. \r\n            <div draggable onDragStart={this.startDrag} className=\"preview-img-box\">\r\n                <div \r\n                    className={this.className}\r\n                    key={this.key}\r\n                    style={{background: this.backgroundImage, backgroundRepeat: \"no-repeat\", backgroundPosition: \"50% 50%\", backgroundSize: \"500px\"}}\r\n                    onClick={this.handleClick.bind(this)}\r\n                >\r\n                    {this.name}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { Preview }","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { GetEditorPreviewUrl, GetEditors } from './API.js';\r\nimport { Preview } from './EditorPreview.js';\r\n\r\nclass GcodePreview extends React.Component {\r\n\r\n    constructor (props) {\r\n\r\n        // Initialize\r\n        super(props);\r\n        this.IP = props.IP;\r\n        this.username = props.username;\r\n        \r\n        this.editorNumbers = [];\r\n\r\n        this.previews = {};\r\n\r\n        this.listItems = <div>Loading...</div>;\r\n\r\n        this.state = {\r\n\r\n            numbersList: <div></div>,\r\n            mounted: false\r\n\r\n        }\r\n\r\n        // setPreview method gets passed into callbacks\r\n        this.setPreview = function(id, name, url, gcodepreviews) {\r\n\r\n            gcodepreviews.previews[id] = {'name': name, 'url': url};\r\n            console.log(\"URL set:\", gcodepreviews.previews[id])\r\n\r\n        }\r\n\r\n        this.enterEditor = function ( editorURL, username, editorID, editorName ) {\r\n            window.location = \"/editor/editor?editorURL=\" + editorURL + \"&username=\" + username + \"&editorID=\" + editorID + \"&editorName=\" + editorName;\r\n        }\r\n\r\n        this.getEditorNumbers().then(\r\n            response =>\r\n            {\r\n                \r\n                console.log('Editor numbers pulled:', this.editorNumbers);\r\n\r\n                // Sort editor ID's backwards to get the most recent documents first\r\n                this.editorNumbers.sort();\r\n                this.editorNumbers.reverse();\r\n\r\n                // After promise has been resolved:\r\n                var numbers = this.editorNumbers;\r\n\r\n                // Object with preview URLs\r\n                for (var i = 0; i < numbers.length; i++) {\r\n                    this.previews[numbers[i]] = SetEditorPreview(this.IP, this.username, numbers[i], this);\r\n                }\r\n\r\n                // Wait for all editor previews to be obtained\r\n                console.log(\"All promises:\", Object.values(this.previews));\r\n                Promise.all( Object.values(this.previews) ).then( (values) => {\r\n\r\n                    // Create elements with preview URLs\r\n                    this.listItems = numbers.map((numbers) =>\r\n\r\n                        // set component\r\n                        {\r\n                            let url = \"url(\" + this.previews[numbers]['url'] + \")\";\r\n                            let name = this.previews[numbers]['name'];\r\n                            return (\r\n\r\n                                <Preview \r\n                                    gcodelist={this}\r\n                                    key={numbers.toString()} \r\n                                    backgroundImage={url}\r\n                                    id = {numbers}\r\n                                    name = {name} \r\n                                    onClick={function(){console.log(\"click\")}}\r\n                                />\r\n\r\n                            )\r\n                        }\r\n\r\n                    );\r\n\r\n                    console.log('items:', this.listItems);\r\n                    this.state = {\r\n\r\n                        numbersList: this.listItems,\r\n                        mounted: this.state.mounted\r\n\r\n                    };\r\n\r\n                    // Prevent setState before component is mounted\r\n                    console.log('mounted?', this.state.mounted)\r\n                    if (this.state.mounted) {\r\n\r\n                        this.setState({\r\n                            numbersList: this.listItems,\r\n                            mounted: this.state.mounted\r\n                        });\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n\r\n            numbersList: this.listItems,\r\n            mounted: true\r\n\r\n        });\r\n\r\n    }\r\n\r\n    update () {\r\n        \r\n    }\r\n\r\n    async getEditorNumbers() {\r\n        \r\n        await GetEditors(this.IP, this.username)  // API.js function to pull from S3\r\n        .then(\r\n\r\n            editors => {  // push S3 response into this.editorNumbers\r\n\r\n                for (var i = 0; i < editors.length; i++) {\r\n\r\n                    console.log(editors[i]);\r\n                    this.editorNumbers.push(editors[i]);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        );\r\n        \r\n        return this.editorNumbers;  // Return to resolve promise\r\n\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            \r\n            <div id=\"EditorList\">\r\n            \r\n                <p className=\"noselect\">\r\n                    Ordered by last modified\r\n                </p>\r\n\r\n                {this.state.numbersList}\r\n\r\n            </div>            \r\n\r\n        );\r\n\r\n    }\r\n  \r\n}\r\n\r\nasync function SetEditorPreview( IP, User, EditorID, gcodepreviews ) {\r\n\r\n    // Get the preview of the specified editor ID\r\n    var url;\r\n    url = await GetEditorPreviewUrl( IP, User, EditorID, gcodepreviews ).then(response => {\r\n\r\n        return \"OK\";\r\n\r\n    })\r\n\r\n}\r\n\r\nexport { GcodePreview };\r\n","\r\nfunction CreateID() {\r\n\r\n    // Create ID from date\r\n    if (!Date.now) {\r\n        Date.now = function() { return new Date().getTime(); }\r\n    }\r\n    return (Math.floor(Date.now() / 1000));\r\n\r\n}\r\n\r\nfunction PreciseID() {\r\n\r\n    // Create ID from date (ms instead of s, to make it difficult to have the same ID between two items)\r\n    if (!Date.now) {\r\n        Date.now = function() { return new Date().getTime(); }\r\n    }\r\n    return (Math.floor(Date.now()));\r\n\r\n}\r\n\r\nfunction RandomID() {\r\n\r\n    return Math.random();\r\n\r\n}\r\n\r\nexport { CreateID, PreciseID, RandomID }\r\n","\r\nimport React from 'react';\r\nimport { GetEditorData, GetEditorURL } from './API.js';\r\n\r\nclass QueuePlateElement extends React.Component {\r\n\r\n    /*\r\n        Returns a component with the info of a queue.\r\n    */\r\n\r\n    constructor( props ) {\r\n        \r\n        super( props );\r\n        this.key = props.key;\r\n\r\n        this.id = props.id;\r\n\r\n        this.queueOrder = props.queueOrder;\r\n\r\n        // console.log(\"IDID:\", this.id)\r\n\r\n        if (props.name){\r\n\r\n            this.name = props.name;\r\n\r\n        }\r\n\r\n        // Separate number from plate name\r\n        this.number = props.number;\r\n        this.plateName = props.plateName;\r\n\r\n        // console.log(\"NUMBER:\", this.number, \" PlateName:\", this.plateName);\r\n\r\n        this.className = \"queue\";\r\n\r\n        this.queuelist = props.queuelist;\r\n\r\n        this.setInfo = props.setInfo;\r\n\r\n        console.log(\"SETINFO:\", this.setInfo)\r\n\r\n        this.handleClick = () => {\r\n\r\n            // console.log(\"queue plate clicked.\");\r\n\r\n        };\r\n\r\n        this.onChange = () => {\r\n\r\n            // console.log(\"newvalue\", document.getElementById(\"queueText\" + this.id).value)\r\n            this.setInfo( this.queueOrder, document.getElementById(\"queueText\" + this.id).value );\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // Use vanilla JS to control textField\r\n        var textField = document.getElementById(\"queueText\" + this.id);\r\n        textField.value = this.number;\r\n        textField.addEventListener( \"change\", () => {\r\n\r\n\t\t\tthis.onChange();\r\n\r\n\t\t})\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return( \r\n\r\n            <div className=\"queue-box\" onClick={this.handleClick.bind(this)}>\r\n                <input id={\"queueText\" + this.id} type=\"text\" defaultValue />\r\n                <div className=\"queue-input\">\r\n                    <div className=\"noselect\">\r\n                        {this.plateName}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { QueuePlateElement }","\r\nimport React from 'react';\r\nimport { SaveInfo } from './API.js';\r\nimport { QueuePlateElement } from './QueuePlateElement.js'\r\nimport { PreciseID, RandomID } from './ID.js'\r\n\r\nclass QueueElement extends React.Component {\r\n\r\n    /*\r\n        Returns a component with the info of a queue.\r\n    */\r\n\r\n    constructor( props ) {\r\n        \r\n        super( props );\r\n        this.key = props.key;\r\n\r\n        this.id = props.id;\r\n        this.name = props.name;\r\n\r\n        this.className=\"queue\";\r\n\r\n        this.queuelist = props.queuelist;\r\n\r\n        this.elements = props.elements;\r\n\r\n        console.log(\"this.elements:\", this.elements)\r\n\r\n        // INFO ON ELEMENTS\r\n        this.elementsInfo = {}\r\n\r\n        // CALLBACK FOR SETTING INFO. Needed to change the amount of an item in the queue, because props is static. \r\n        this.setInfo = ( queueOrder, number ) => {\r\n\r\n            this.elements[queueOrder][\"number\"] = number;\r\n\r\n        }\r\n\r\n        \r\n\r\n        // Create dropdown containing this.elements\r\n        var elementsArr = this.elementsArray();\r\n        this.elementsDiv = elementsArr.map((element) => {\r\n\r\n            return (\r\n\r\n                <QueuePlateElement\r\n                    queueOrder={elementsArr.indexOf( element )}\r\n                    gcodelist={this}\r\n                    key={element[\"plateName\"]} \r\n                    id = {element[\"ID\"]}  \r\n                    rootID = {element[\"rootID\"]}  // ID of the element\r\n                    plateName = {element[\"plateName\"]} \r\n                    number = {element[\"number\"]}\r\n                    setInfo = {this.setInfo} // Callback for changing number of item\r\n                />\r\n\r\n            )\r\n\r\n        })\r\n\r\n        this.state = {\r\n\r\n            numbersList: <div></div>,\r\n            mounted: false,\r\n            display: \"none\"\r\n\r\n        }\r\n\r\n        this.handleClick = function () {\r\n\r\n            // Toggle dropdown items on and off\r\n            if (this.state.mounted) {\r\n\r\n                console.log(this.state.display)\r\n\r\n                if ( this.state.display == \"none\" ) {\r\n\r\n                    console.log(this.state.display)\r\n\r\n                    this.setState({\r\n\r\n                        numbersList: this.elementsDiv,\r\n                        mounted: true,\r\n                        display: \"block\"\r\n            \r\n                    });\r\n\r\n                }\r\n                else {\r\n\r\n                    this.setState({\r\n\r\n                        numbersList: this.elementsDiv,\r\n                        mounted: true,\r\n                        display: \"none\"\r\n            \r\n                    });\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            console.log(this.elementsDiv);\r\n            for ( var key in this.elementsDiv ) {\r\n\r\n                var order = key; \r\n\r\n                console.log(\"ID\", this.elementsDiv[key][\"props\"][\"id\"]);\r\n\r\n                // Number can be changed\r\n                var number;\r\n                if (this.elementsInfo[this.elementsDiv[key][\"props\"][\"id\"]]) {\r\n                    number = this.elementsInfo[this.elementsDiv[key][\"props\"][\"id\"]][\"number\"];\r\n                }\r\n                else {\r\n                    number = this.elementsDiv[key][\"props\"][\"number\"];\r\n                }\r\n                console.log(\"Number\", number);\r\n\r\n                console.log(\"plateName\", this.elementsDiv[key][\"props\"][\"plateName\"]);\r\n                console.log(\"rootID\", this.elementsDiv[key][\"props\"][\"rootID\"]);\r\n\r\n            }\r\n\r\n            this.save();\r\n\r\n        };\r\n\r\n        this.dragOver = (ev) => {\r\n\r\n            ev.preventDefault();\r\n    \r\n        }        \r\n          \r\n        this.drop = (ev) => {\r\n    \r\n            const droppedItem = ev.dataTransfer.getData(\"application/json\");\r\n            if (droppedItem) {\r\n\r\n                var newID = PreciseID();\r\n                var plateName = JSON.parse(droppedItem)[\"name\"];\r\n                var rootID = JSON.parse(droppedItem)[\"id\"].toString();\r\n\r\n                // Update elements info\r\n                ////////////\r\n                this.elements[Object.keys(this.elements).length] = {\r\n                    \"ID\": newID,\r\n                    \"number\": \"1\",\r\n                    \"plateName\": plateName,\r\n                    \"rootID\": rootID\r\n                };\r\n\r\n                // Update elements with dropped item's data\r\n                this.elementsDiv.push(\r\n\r\n                    <QueuePlateElement \r\n                        queueOrder={Object.keys(this.elementsDiv).length}\r\n                        gcodelist={this}\r\n                        key={plateName.toString()} \r\n                        id = {newID}  // Completely unique ID\r\n                        rootID = {rootID}  // ID of the element\r\n                        plateName = {plateName} \r\n                        number = \"1\"\r\n                        setInfo = {this.setInfo} // Callback for changing number of item\r\n                    />\r\n\r\n                )\r\n\r\n                // Update internal state\r\n                this.setState({\r\n\r\n                    numbersList: this.elementsDiv\r\n\r\n                })\r\n\r\n            }\r\n    \r\n        }\r\n\r\n        this.startDrag = ( ev ) => {\r\n\r\n            let transferObject = {\r\n                \"queueName\": this.name,\r\n                \"queueID\": this.id,\r\n                \"queueElements\": this.elements\r\n            };\r\n            ev.dataTransfer.setData(\"application/json\", JSON.stringify(transferObject));\r\n    \r\n        }\r\n\r\n        \r\n        \r\n    }\r\n\r\n    elementsArray() {\r\n        // Convert elements object to array of same order\r\n        var elementsArr = [];\r\n        for (var element in this.elements) {\r\n\r\n            elementsArr.push(this.elements[element]);\r\n\r\n        }\r\n        return elementsArr;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n\r\n            numbersList: this.elementsDiv,\r\n            mounted: true,\r\n            display: \"none\"\r\n\r\n        });\r\n\r\n        // Use vanilla JS to control textField\r\n        var titleField = document.getElementById(\"titleField\" + this.id);\r\n        titleField.value = this.name;\r\n\r\n    }\r\n\r\n    save() {\r\n\r\n        // Convert all necessary data into JSON\r\n        var queueData = {};\r\n        var data = {};\r\n\r\n        for ( var key in this.elementsDiv ) {\r\n\r\n            var order = key; \r\n\r\n            var ID = this.elementsDiv[key][\"props\"][\"id\"];\r\n\r\n            // Number can be changed\r\n            var number;\r\n            if (this.elementsInfo[this.elementsDiv[key][\"props\"][\"id\"]]) {\r\n                number = this.elementsInfo[this.elementsDiv[key][\"props\"][\"id\"]][\"number\"];\r\n            }\r\n            else {\r\n                number = this.elementsDiv[key][\"props\"][\"number\"];\r\n            }\r\n\r\n            var plateName = this.elementsDiv[key][\"props\"][\"plateName\"];\r\n            var rootID = this.elementsDiv[key][\"props\"][\"rootID\"];\r\n\r\n            // add to data\r\n            queueData[order] = {\r\n                \"ID\": ID,\r\n                \"number\": number,\r\n                \"plateName\": plateName,\r\n                \"rootID\": rootID\r\n            }\r\n\r\n        }\r\n\r\n        data = {\r\n            \"name\": this.name,\r\n            \"id\": this.id,\r\n            \"queues\": queueData\r\n        }\r\n    \r\n        // console.log( \"IP:\", this.queuelist.IP )\r\n        SaveInfo( data, this.queuelist.username, this.id, this.queuelist.IP );\r\n        // console.log(\"SAVING:\", this);\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        return( \r\n\r\n            <div>\r\n\r\n                <div draggable onDragStart={this.startDrag} onDragOver={this.dragOver} onDrop={this.drop} className=\"queue-box\" onClick={this.handleClick.bind(this)}>\r\n                    <div \r\n                        className={this.className}\r\n                        key={this.key}\r\n                    >\r\n                        <input id={\"titleField\" + this.id} type=\"text\" className=\"\" defaultValue/>\r\n                        {/* <i className=\"arrow\" style={{marginBottom: \"5px\", right: \"10px\"}}></i> */}\r\n                    </div>\r\n                    {/* <div className=\"arrow\" style={{marginBottom: \"5px\", right: \"10px\"}}></div> */}\r\n                </div>\r\n\r\n                <div style={{display: this.state.display}}>\r\n                    {this.state.numbersList}\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { QueueElement }","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { GetQueueInfo, GetQueueKeys } from './API.js';\r\nimport { Preview } from './EditorPreview.js';\r\nimport { QueueElement } from './QueueElement';\r\nimport { CreateID } from './ID';\r\n\r\nclass QueueList extends React.Component {\r\n\r\n    constructor (props) {\r\n\r\n        // Initialize\r\n        super(props);\r\n\r\n        // Common info for API calls\r\n        this.IP = props.IP;\r\n        this.username = props.username;\r\n        \r\n        // Keys of all queues in existence for user\r\n        this.queueKeys = [];\r\n\r\n        // User's queues to display to the screen\r\n        this.queuesData = {};\r\n\r\n        this.listItems = <div>Loading...</div>;\r\n\r\n        this.state = {\r\n\r\n            queuesList: <div></div>,\r\n            mounted: false\r\n\r\n        }\r\n\r\n        // for communication with the QueueHeader parent element\r\n        this.setQueueList = props.setQueueList;\r\n\r\n        /*\r\n            setQueue method gets passed into callbacks:\r\n            This object is passed into a fetch() which, after pulling the info for the queue, adds a \r\n            corresponding object to this.queuesData. \r\n        */\r\n        this.setQueue = function(id, info, queueList) {\r\n\r\n            queueList.queuesData[id] = info;\r\n\r\n        }\r\n\r\n        // Create new queue for queue name\r\n        this.addQueue = ( queueInfo ) => {\r\n    \r\n            let newID = CreateID();\r\n            this.queueKeys.push( newID );\r\n            this.setQueue( newID, queueInfo, this );\r\n\r\n            this.listItems = this.queueKeys.map((key) =>\r\n\r\n                // set component\r\n                {\r\n                    let name = this.queuesData[key]['name'];\r\n                    let info = this.queuesData[key];\r\n                    return (\r\n\r\n                        this.createQueueElement( this, key, info )\r\n\r\n                    )\r\n                }\r\n\r\n            );\r\n\r\n            this.setState({\r\n\r\n                queuesList: this.listItems\r\n\r\n            })\r\n    \r\n        }\r\n\r\n        // Pull the keys of all the queues; use them to pull every queue of the user\r\n        this.getQueueKeys().then(\r\n\r\n            response =>\r\n            {\r\n                \r\n                // Sort Queue ID's backwards to get the most recent documents first\r\n                this.queueKeys.sort();\r\n                this.queueKeys.reverse();                \r\n\r\n                // Object with preview URLs\r\n                var keys = this.queueKeys;  // queueKeys has been set by callback\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    this.queuesData[keys[i]] = SetQueueInfo(this.IP, this.username, keys[i], this);\r\n                }\r\n\r\n                // Wait for all Queues' info to be obtained\r\n                Promise.all( Object.values(this.queuesData) ).then( (values) => {\r\n\r\n                    // Create elements\r\n                    this.listItems = keys.map((key) =>\r\n\r\n                        // set component\r\n                        {\r\n                            let name = this.queuesData[key]['name'];\r\n                            let info = this.queuesData[key];\r\n                            return (\r\n\r\n                                this.createQueueElement( this, key, info )\r\n\r\n                            )\r\n                        }\r\n\r\n                    );\r\n\r\n                    console.log(\"LISTITEMS:\", this.listItems)\r\n\r\n                    // console.log('items:', this.listItems);\r\n                    this.state = {\r\n\r\n                        queuesList: this.listItems,\r\n                        mounted: this.state.mounted\r\n\r\n                    };\r\n\r\n                    // Prevent setState before component is mounted\r\n                    // console.log('mounted?', this.state.mounted)\r\n                    if (this.state.mounted) {\r\n\r\n                        this.setState({\r\n                            queuesList: this.listItems,\r\n                            mounted: this.state.mounted\r\n                        });\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n        );\r\n\r\n        // Form connection with QueueHeader\r\n        this.setQueueList( this );\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n\r\n            queuesList: this.listItems,\r\n            mounted: true\r\n\r\n        });\r\n\r\n    }\r\n\r\n    update () {\r\n        \r\n    }\r\n\r\n    // Get keys for all queues in existence for user\r\n    async getQueueKeys() {\r\n        \r\n        await GetQueueKeys(this.IP, this.username)  // API.js function for S3\r\n        .then(\r\n\r\n            queues => {  // push S3 response into this.queueKeys\r\n\r\n                for (var i = 0; i < queues.length; i++) {\r\n                    this.queueKeys.push(queues[i]);\r\n                }\r\n\r\n            }\r\n\r\n        );\r\n        \r\n        return this.queueKeys;  // Return to resolve promise\r\n\r\n    }\r\n\r\n    createQueueElement( queuelist, key, info ) {\r\n\r\n        return (\r\n            <QueueElement \r\n                queuelist={queuelist}\r\n                key={key.toString()} \r\n                id = {key}\r\n                name = {info[\"name\"]} \r\n                elements = {info[\"queues\"]}  // \"2_Reservoir A\", \"5_Reservoir B\", \"3_Benchy\"\r\n            />\r\n        )\r\n        \r\n    }\r\n\r\n    \r\n\r\n    render () {\r\n\r\n        return (\r\n            \r\n            <div id=\"QueueList\">\r\n            \r\n                <p className=\"noselect\">\r\n                    Ordered by last modified\r\n                </p>\r\n\r\n                {this.state.queuesList}\r\n\r\n            </div>            \r\n\r\n        );\r\n\r\n    }\r\n  \r\n}\r\n\r\nasync function SetQueueInfo( IP, Username, QueueID, QueueList ) {\r\n\r\n    // Get the info of the specified Queue ID (sets variable via callback)\r\n    await GetQueueInfo( IP, Username, QueueID, QueueList ).then( () => {\r\n\r\n        return \"OK\";\r\n\r\n    })\r\n\r\n}\r\n\r\nexport { QueueList };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { SetEditorURL } from './API.js';\r\nimport { CreateID } from './ID.js';\r\n// import { NewEditorButton } from './NewEditorButton.js';\r\nimport { QueueList } from './QueueList.js';\r\n\r\nclass QueueHeader extends React.Component {\r\n\r\n    constructor (props) {\r\n\r\n        // Initialize\r\n        super(props);\r\n        this.IP = props.IP;\r\n        this.username = props.username;\r\n\r\n        this.editorName = \"Untitled Plate\"\r\n\r\n        this.setURL = function( editorURL ) {\r\n            this.editorURL = editorURL;\r\n        }\r\n\r\n        var username = this.username;\r\n        var IP = this.IP;\r\n\r\n        this.state = {\r\n\r\n            newQueue: () => { console.log(\"old\") }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n\r\n            numbersList: this.listItems,\r\n            mounted: true\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /* \r\n        Function to be passed into QueueList. \r\n        QueueList uses it to set a function in QueueHeader \r\n        and thus form an API between the elements for communication. \r\n    */\r\n    setQueueList ( queueList ) {\r\n\r\n        this.queueList = queueList;\r\n        console.log(\"SETTTTttyt\", this.queueList)\r\n\r\n        this.setState({\r\n\r\n            newQueue: () => { \r\n                \r\n                // defaultData: data of new, untitled queue\r\n                var defaultData = {\r\n                    \"name\": \"New Queue\", \r\n                    \"id\": 1628362074, \r\n                    \"queues\": {}\r\n                }\r\n\r\n                this.queueList.addQueue( defaultData ); \r\n            \r\n            }\r\n\r\n        })\r\n\r\n        console.log(this.state.newQueue)\r\n\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <div id=\"QueueHeader\">\r\n\r\n                    <div className=\"newqueuelabel\">\r\n                        <p className=\"noselect\">\r\n                            Build Sequence\r\n                        </p>\r\n                    </div>\r\n                    <div id=\"newqueuebutton\" className=\"newqueuebutton\" onClick={this.state.newQueue}>\r\n                        <p className=\"noselect\">\r\n                            +\r\n                        </p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <QueueList IP={this.IP} username={this.username} setQueueList={this.setQueueList.bind(this)} />\r\n\r\n            </div>\r\n            \r\n        );\r\n\r\n    }\r\n  \r\n}\r\n\r\nexport { QueueHeader };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { GcodePreview } from './EditorList.js';\r\nimport { QueueHeader } from './QueueHeader.js';\r\nimport { QueueList } from './QueueList.js';\r\n\r\nclass Queue extends React.Component {\r\n\r\n  constructor( props ) {\r\n\r\n    super(props);\r\n    this.IP = props.serverIP;\r\n    this.username = props.username;\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n        {/*  QueueList is a child of QueueHeader so that QueueHeader can modify QueueList */}\r\n        <QueueHeader IP={this.IP} username={this.username} />\r\n        \r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n  \r\n\r\n}\r\n\r\nexport default Queue;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { SetEditorURL } from './API.js';\r\nimport { CreateID } from './ID.js';\r\n// import { NewEditorButton } from './NewEditorButton.js';\r\n\r\nclass EditorHeader extends React.Component {\r\n\r\n    constructor (props) {\r\n\r\n        // Initialize\r\n        super(props);\r\n        this.IP = props.IP;\r\n        this.username = props.username;\r\n\r\n        this.editorName = \"Untitled Plate\"\r\n\r\n        this.setURL = function( editorURL ) {\r\n            this.editorURL = editorURL;\r\n        }\r\n\r\n        var username = this.username;\r\n        var IP = this.IP;\r\n\r\n        // New, blank, editor\r\n        this.newEditor = function() {\r\n            \r\n            // Create new ID\r\n            var editorID = CreateID();\r\n\r\n            // Get standard editor template URL\r\n            SetEditorURL( username, IP, editorID, this.setURL.bind(this) )\r\n            .then( () => { \r\n\r\n                console.log(\"URL::\", this.editorURL)\r\n                window.location = \"/editor/editor?editorURL=\" + this.editorURL + \"&username=\" + this.username + \"&editorID=\" + editorID + \"&editorName=\" + this.editorName;\r\n                \r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n\r\n            numbersList: this.listItems,\r\n            mounted: true\r\n\r\n        });\r\n\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n\r\n            <div id=\"EditorHeader\">\r\n\r\n                <div className=\"neweditorlabel\">\r\n                    <p className=\"noselect\">\r\n                        Prepare Models\r\n                    </p>\r\n                </div>\r\n                <div className=\"neweditorbutton\" onClick={this.newEditor.bind(this)}>\r\n                    <p className=\"noselect\">\r\n                        +\r\n                    </p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n  \r\n}\r\n\r\nexport { EditorHeader };\r\n","import React from 'react';\nimport './App.css';\nimport { GcodePreview } from './EditorList.js';\nimport { EditorHeader } from './EditorHeader.js';\n\nclass Prepare extends React.Component {\n\n  constructor( props ) {\n\n    super(props);\n    this.IP = props.serverIP;\n    this.username = props.username;\n\n  }\n\n  render() {\n\n    return (\n      \n      <div>\n\n        <EditorHeader IP={this.IP} username={this.username} />\n        <div className=\"vr\"/>\n        <GcodePreview IP={this.IP} username={this.username} />\n\n      </div>\n\n    );\n\n  }\n  \n\n}\n\nexport default Prepare;\n","import React from 'react';\r\nimport './App.css';\r\n// import { SliceQueue, SliceItem } from './API_Slice.js'\r\nimport { SpliceQueue } from './API.js'\r\n\r\nclass Slice extends React.Component {\r\n\r\n  constructor( props ) {\r\n\r\n    super(props);\r\n    this.IP = props.serverIP;\r\n    this.username = props.username;\r\n\r\n    this.drop = ( ev ) => {\r\n\r\n        const droppedItem = ev.dataTransfer.getData(\"application/json\");\r\n        if (droppedItem) {\r\n\r\n            sliceItem( droppedItem, this.IP );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    this.dragOver = (ev) => {\r\n\r\n        ev.preventDefault();\r\n\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n        <div className=\"sliceBox\">\r\n            \r\n            <div className=\"sliceText\">\r\n                <p className=\"noselect\">\r\n                    SLICE\r\n                </p>\r\n            </div>\r\n            <div id=\"sliceBucket\" className=\"sliceBucket\" onDragOver={this.dragOver} onDrop={this.drop}>\r\n\r\n            </div>\r\n\r\n        </div>        \r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\nfunction sliceItem( item, IP ) {\r\n\r\n    var queue = JSON.parse( item );\r\n    console.log(\"Slicing queue:\", queue);\r\n\r\n    // Create an array of pure elements to slice\r\n    var queueArr = []\r\n    for ( var index in queue[\"queueElements\"] ) {\r\n\r\n        var element = queue[\"queueElements\"][index];\r\n        console.log(\"Slicing item:\", element);\r\n        queueArr.push( element );\r\n\r\n    }\r\n    // SliceQueue( JSON.stringify( queueArr ) );\r\n\r\n    var jsonQueue = JSON.stringify( {\r\n        \"queue\": queueArr\r\n    } )\r\n\r\n    SpliceQueue( jsonQueue, IP );\r\n\r\n}\r\n\r\nexport default Slice;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Queue from './Queue';\nimport Prepare from './Prepare';\nimport Slice from './Slice';\n\nimport reportWebVitals from './reportWebVitals';\n\nvar username = \"testman\";\n\n// IP of EC2: 54.159.145.255\n// IP of local Linux: 172.23.75.78\n\nReactDOM.render(\n  <React.StrictMode>\n    <Slice username={username} serverIP=\"54.159.145.255\"/>\n    <Queue username={username} serverIP=\"54.159.145.255\"/>\n    <Prepare username={username} serverIP=\"54.159.145.255\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}